enum AgeGroup {
  U7
  U8
  U9
  U10
  U11
  U12
  U13
  U14
  U15
  U16
  U17
  U18
  U19
  U20
  U21
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  EXPERIENCED
}

enum Positions {
  GK
  LB
  CB
  RB
  LM
  CM
  RM
  ST
}

enum GameType {
  FRIENDLY
  LEAGUE
  CUP
}

type TeamPlayer @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  age: Int!
  kitNumber: Int!
  positions: [Positions!]!
  teamID: ID! @index(name: "byTeam")
}

type Team @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  league: String!
  ageGroup: AgeGroup!
  location: String!
  email: AWSEmail!
  phoneNumber: AWSPhone!
  website: AWSURL!
  profileID: ID! @index(name: "byProfile")
  players: [TeamPlayer] @hasMany(indexName: "byTeam", fields: ["id"])
  associatedMatchPosts: [MatchPost] @hasMany(indexName: "byTeam", fields: ["id"])
}

type Player @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  dob: AWSDate!
  ageGroup: AgeGroup!
  positions: [Positions!]!
  skillLevel: SkillLevel!
  profileID: ID! @index(name: "byProfile")
}

type Profile @model @auth(rules: [{allow: public}]) {
  id: ID!
  username: String!
  name: String!
  dob: AWSDate!
  email: AWSEmail!
  accountType: String!
  street: String!
  townCity: String!
  county: String!
  postcode: String!
  phoneNumber: AWSPhone!
  players: [Player] @hasMany(indexName: "byProfile", fields: ["id"])
  team: [Team] @hasMany(indexName: "byProfile", fields: ["id"])
  posts: [MatchPost] @hasMany(indexName: "byProfile", fields: ["id"])
  interestedPosts: [MatchPost] @manyToMany(relationName: "ProfileMatchPost")
  chats: [Chat] @manyToMany(relationName: "ProfileChat")
}

type MatchPost @model @auth(rules: [{allow: public}]) {
  id: ID!
  title: String!
  description: String!
  createdByProfileID: ID! @index(name: "byProfile")
  gameType: GameType!
  ageGroup: AgeGroup!
  teamSize: Int!
  substitutionLimit: Boolean!
  cards: Boolean!
  halfLength: Int!
  kickOff: AWSDateTime!
  street: String!
  townCity: String!
  county: String!
  postcode: String!
  isActive: Boolean!
  teamID: ID! @index(name: "byTeam")
  teamName: String!
  interestedUsers: [Profile] @manyToMany(relationName: "ProfileMatchPost")
}

type Chat @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String
  users: [Profile!] @manyToMany(relationName: "ProfileChat")
  messages: [ChatMessage] @hasMany(indexName: "byChat", fields: ["id"])
  userIDs: [ID!]!
}

type ChatMessage @model @auth(rules: [{allow: public}]) {
  id: ID!
  chatID: ID! @index(name: "byChat") 
  senderUserID: ID!
  message: String!
}
 